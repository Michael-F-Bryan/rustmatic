/* automatically generated by rust-bindgen */

#![allow(bad_style, dead_code)]

pub type __int32_t = crate::ctypes::c_int;
pub type __uint32_t = crate::ctypes::c_uint;
pub type __uint64_t = crate::ctypes::c_ulong;
pub const wasm_result_t_WASM_SUCCESS: wasm_result_t = 0;
pub const wasm_result_t_WASM_GENERIC_ERROR: wasm_result_t = 1;
pub const wasm_result_t_WASM_ADDRESS_OUT_OF_BOUNDS: wasm_result_t = 2;
pub const wasm_result_t_WASM_UNKNOWN_VARIABLE: wasm_result_t = 3;
pub const wasm_result_t_WASM_BAD_VARIABLE_TYPE: wasm_result_t = 4;
/// The various error codes used by this library.
///
/// Every non-trivial function should return a wasm_result_t to indicate
/// whether it executed successfully.
pub type wasm_result_t = u32;
pub const wasm_log_level_LOG_ERROR: wasm_log_level = 0;
pub const wasm_log_level_LOG_WARN: wasm_log_level = 1;
pub const wasm_log_level_LOG_INFO: wasm_log_level = 2;
pub const wasm_log_level_LOG_DEBUG: wasm_log_level = 3;
pub const wasm_log_level_LOG_TRACE: wasm_log_level = 4;
/// The log levels used with `wasm_log()`.
pub type wasm_log_level = u32;
extern "C" {
    /// Log a message at the specified level, including information about the
    /// file
    /// and line the message was logged from.
    pub fn wasm_log(
        level: wasm_log_level,
        file: *const crate::ctypes::c_char,
        file_len: crate::ctypes::c_int,
        line: crate::ctypes::c_int,
        message: *const crate::ctypes::c_char,
        message_len: crate::ctypes::c_int,
    ) -> wasm_result_t;
}
extern "C" {
    /// Read from an input from memory-mapped IO.
    pub fn wasm_read_input(
        address: u32,
        buffer: *mut crate::ctypes::c_char,
        buffer_len: crate::ctypes::c_int,
    ) -> wasm_result_t;
}
extern "C" {
    /// Write to an output using memory-mapped IO.
    pub fn wasm_write_output(
        address: u32,
        data: *const crate::ctypes::c_char,
        data_len: crate::ctypes::c_int,
    ) -> wasm_result_t;
}
extern "C" {
    /// Get a measurement of a monotonically nondecreasing clock.
    ///
    /// The absolute numbers don't necessarily mean anything, the difference
    /// between two measurements can be used to tell how much time has passed.
    pub fn wasm_current_time(secs: *mut u64, nanos: *mut u32) -> wasm_result_t;
}
extern "C" {
    /// Read a globally defined boolean variable.
    ///
    /// Reading an unknown variable or trying to access a variable using the
    /// wrong
    /// type will result in an error.
    pub fn wasm_variable_read_boolean(
        name: *const crate::ctypes::c_char,
        name_len: crate::ctypes::c_int,
        value: *mut bool,
    ) -> wasm_result_t;
}
extern "C" {
    /// Read a globally defined floating-point variable.
    ///
    /// Reading an unknown variable or trying to access a variable using the
    /// wrong
    /// type will result in an error.
    pub fn wasm_variable_read_double(
        name: *const crate::ctypes::c_char,
        name_len: crate::ctypes::c_int,
        value: *mut f64,
    ) -> wasm_result_t;
}
extern "C" {
    /// Read a globally defined integer variable.
    ///
    /// Reading an unknown variable or trying to access a variable using the
    /// wrong
    /// type will result in an error.
    pub fn wasm_variable_read_int(
        name: *const crate::ctypes::c_char,
        name_len: crate::ctypes::c_int,
        value: *mut i32,
    ) -> wasm_result_t;
}
extern "C" {
    /// Write to a globally defined boolean variable.
    ///
    /// This may fail if the variable already exists and has a different type.
    pub fn wasm_variable_write_boolean(
        name: *const crate::ctypes::c_char,
        name_len: crate::ctypes::c_int,
        value: bool,
    ) -> wasm_result_t;
}
extern "C" {
    /// Write to a globally defined floating-point variable.
    ///
    /// This may fail if the variable already exists and has a different type.
    pub fn wasm_variable_write_double(
        name: *const crate::ctypes::c_char,
        name_len: crate::ctypes::c_int,
        value: f64,
    ) -> wasm_result_t;
}
extern "C" {
    /// Write to a globally defined integer variable.
    ///
    /// This may fail if the variable already exists and has a different type.
    pub fn wasm_variable_write_int(
        name: *const crate::ctypes::c_char,
        name_len: crate::ctypes::c_int,
        value: i32,
    ) -> wasm_result_t;
}
